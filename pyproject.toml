[tool.poetry]
authors = ["Chris <info@exacheck.net>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Framework :: Pydantic :: 2",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Networking :: Monitoring",
  "Topic :: System :: Networking",
]
description = "ExaCheck - ExaBGP Health Checker"
documentation = "https://exacheck.net/deployment/"
homepage = "https://exacheck.net"
keywords = [
  "bgp",
  "exabgp",
  "healthcheck",
  "monitoring",
  "network",
  "networking",
  "networks",
  "routes",
  "routing",
]
name = "exacheck"
readme = "README.md"
repository = "https://github.com/exacheck/exacheck"
version = "0.1.6"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.poetry.urls]
"Changelog" = "https://exacheck.net/development/changelog/"
"Configuration" = "https://exacheck.net/configuration/"
"Docker Deployment" = "https://exacheck.net/deployment/docker/"

[tool.poetry.scripts]
exacheck = 'exacheck.cli:cli'

[tool.poetry.dependencies]
# Python version required
python = ">=3.11,<=3.14"

# ExaBGP itself
exabgp = "^4.2.25"

# General ExaCheck requirements
apprise = "^1.9.2"
loguru = "^0.7.3"
pydantic = {extras = ["timezone"], version = "^2.11.0b1"}
pyyaml = "^6.0.2"
setproctitle = "^1.3.5"
tabulate = "^0.9.0"
ujson = "^5.10.0"

# Requirements for the built in health checks
dnspython = "^2.6.1"
icmplib = "^3.0.4"
ntplib = "^0.4.0"
httpx = {extras = ["http2"], version = "^0.28.1"}

# For the CLI
click = "^8.1.8"

# For Sentry support; optional
sentry-sdk = {version = "^2.22.0", optional = true}

[tool.poetry.extras]
sentry = [
  "sentry-sdk",
]
full = [
  "sentry-sdk",
]

# Declare the below groups as optional
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.format]
optional = true

[tool.poetry.group.test]
optional = true

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.dev.dependencies]
# Packages for linting
pycodestyle = "^2.12.1"
pylint = "^3.3.5"
pylint-pydantic = "^0.3.5"
ruff = "^0.11.0"
semgrep = "^1.85.0"

# Misc other development tools
Cython = "^3.0.11"
devtools = {extras = ["pygments"], version = "^0.12.2"}
ipython = "^9.0.2"
Markdown = "^3.7"
pipenv = "^2024.4.0"
rich = "^13.9.4"

# Define the packages for the optional groups
[tool.poetry.group.format.dependencies]
# Packages for code formatting
autopep8 = "^2.3.2"
black = "^25.1.0"
flake8 = "^7.1.2"

[tool.poetry.group.test.dependencies]
# Packages for testing
hypothesis = {extras = ["cli"], version = "^6.129.3"}
pytest = "^8.3.5"
pytest-html = "^4.1.1"
respx = "^0.22.0"

[tool.poetry.group.typing.dependencies]
# Packages for type checking
mypy = "^1.14.1"
pyre-check = "^0.9.23"

# Extensions for type checking
types-pyyaml = "^6.0.12.20241230"
types-requests = "^2.32.0.20250306"
types-tabulate = "^0.9.0.20241207"
types-ujson = "^5.10.0.20240515"

[tool.autopep8]
# Raise default maximum line length
max_line_length = 120

[tool.flake8]
# Raise default maximum line length
max-line-length = 120

[tool.pylint.'MESSAGES CONTROL']
extension-pkg-whitelist = "pydantic"
max-line-length = 120

[tool.ruff]
line-length = 120

[tool.pytest.ini_options]
log_level = "INFO"
addopts = "-s"

[tool.mypy]
ignore_missing_imports = true
plugins = "pydantic.mypy"
check_untyped_defs = true
